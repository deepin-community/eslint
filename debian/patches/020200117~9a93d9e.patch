Description: fix no-restricted-imports export * false negative
Origin: upstream, https://github.com/eslint/eslint/commit/9a93d9e
Bug: https://github.com/eslint/eslint/issues/12737
Author: Milos Djermanovic <milos.djermanovic@gmail.com>
Last-Update: 2022-01-30
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
--- a/lib/rules/no-restricted-imports.js
+++ b/lib/rules/no-restricted-imports.js
@@ -91,6 +91,7 @@
     },
 
     create(context) {
+        const sourceCode = context.getSourceCode();
         const options = Array.isArray(context.options) ? context.options : [];
         const isPathAndPatternsObject =
             typeof options[0] === "object" &&
@@ -216,30 +217,36 @@
          */
         function checkNode(node) {
             const importSource = node.source.value.trim();
-            const importNames = node.specifiers ? node.specifiers.reduce((map, specifier) => {
-                let name;
-                const specifierData = { loc: specifier.loc };
-
-                if (specifier.type === "ImportDefaultSpecifier") {
-                    name = "default";
-                } else if (specifier.type === "ImportNamespaceSpecifier") {
-                    name = "*";
-                } else if (specifier.imported) {
-                    name = specifier.imported.name;
-                } else if (specifier.local) {
-                    name = specifier.local.name;
-                }
+            const importNames = new Map();
+
+            if (node.type === "ExportAllDeclaration") {
+                const starToken = sourceCode.getFirstToken(node, 1);
 
-                if (name) {
-                    if (map.has(name)) {
-                        map.get(name).push(specifierData);
-                    } else {
-                        map.set(name, [specifierData]);
+                importNames.set("*", [{ loc: starToken.loc }]);
+            } else if (node.specifiers) {
+                for (const specifier of node.specifiers) {
+                    let name;
+                    const specifierData = { loc: specifier.loc };
+
+                    if (specifier.type === "ImportDefaultSpecifier") {
+                        name = "default";
+                    } else if (specifier.type === "ImportNamespaceSpecifier") {
+                        name = "*";
+                    } else if (specifier.imported) {
+                        name = specifier.imported.name;
+                    } else if (specifier.local) {
+                        name = specifier.local.name;
                     }
-                }
 
-                return map;
-            }, new Map()) : new Map();
+                    if (name) {
+                        if (importNames.has(name)) {
+                            importNames.get(name).push(specifierData);
+                        } else {
+                            importNames.set(name, [specifierData]);
+                        }
+                    }
+                }
+            }
 
             checkRestrictedPathAndReport(importSource, importNames, node);
 
--- a/tests/lib/rules/no-restricted-imports.js
+++ b/tests/lib/rules/no-restricted-imports.js
@@ -168,6 +168,17 @@
         {
             code: "import {\nAllowedObject,\nDisallowedObject, // eslint-disable-line\n} from \"foo\";",
             options: [{ paths: [{ name: "foo", importNames: ["DisallowedObject"] }] }]
+        },
+        {
+            code: "export * from \"foo\";",
+            options: ["bar"]
+        },
+        {
+            code: "export * from \"foo\";",
+            options: [{
+                name: "bar",
+                importNames: ["DisallowedObject"]
+            }]
         }
     ],
     invalid: [{
@@ -357,6 +368,37 @@
         }]
     },
     {
+        code: "export * from \"foo\";",
+        options: [{
+            paths: [{
+                name: "foo",
+                importNames: ["DisallowedObject"],
+                message: "Please import 'DisallowedObject' from /bar/ instead."
+            }]
+        }],
+        errors: [{
+            message: "* import is invalid because 'DisallowedObject' from 'foo' is restricted. Please import 'DisallowedObject' from /bar/ instead.",
+            type: "ExportAllDeclaration",
+            line: 1,
+            column: 8,
+            endColumn: 9
+        }]
+    },
+    {
+        code: "export * from \"foo\";",
+        options: [{
+            name: "foo",
+            importNames: ["DisallowedObject1, DisallowedObject2"]
+        }],
+        errors: [{
+            message: "* import is invalid because 'DisallowedObject1, DisallowedObject2' from 'foo' is restricted.",
+            type: "ExportAllDeclaration",
+            line: 1,
+            column: 8,
+            endColumn: 9
+        }]
+    },
+    {
         code: "import { DisallowedObject } from \"foo\";",
         options: [{
             paths: [{
